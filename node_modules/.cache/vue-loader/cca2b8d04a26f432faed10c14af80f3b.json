{"remainingRequest":"/home/kareem/DataForma/dev/shoppinglist/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kareem/DataForma/dev/shoppinglist/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kareem/DataForma/dev/shoppinglist/src/App.vue","mtime":1623688772861},{"path":"/home/kareem/DataForma/dev/shoppinglist/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kareem/DataForma/dev/shoppinglist/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/kareem/DataForma/dev/shoppinglist/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kareem/DataForma/dev/shoppinglist/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEFjdGlvbnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IExvYWRpbmcgZnJvbSAiQC9jb21wb25lbnRzL2xvYWRpbmciOwppbXBvcnQgRXJyb3JCb3ggZnJvbSAiQC9jb21wb25lbnRzL2Vycm9yYm94IjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJBcHAiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzZWFyY2hUZXh0OiAiIiwKICAgICAgYWN0aXZlVGFiOiAiIiwKICAgIH07CiAgfSwKICBjb21wb25lbnRzOnsKICAgIGxvYWRpbmdCYXI6IExvYWRpbmcsCiAgICBlcnJvckJveDogRXJyb3JCb3gKICB9LAogIGNvbXB1dGVkOiB7CiAgfSwKICBtZXRob2RzOiB7CiAgICAuLi5tYXBBY3Rpb25zKFsiZmlsdGVySXRlbXMiXSksCiAgICBmaWx0ZXIoKXsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goImZpbHRlckl0ZW1zIiwgdGhpcy5zZWFyY2hUZXh0KQogICAgfSwKICAgIGNoYW5nZVRhYih0ZXh0KXsKICAgICAgdGhpcy5hY3RpdmVUYWI9IHRleHQ7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n\t<v-app>\n\t\t<main>\n\t\t\t<div class=\"app-container\">\n\n        <nav class=\"navbar navbar-inverse\">\n          <div class=\"container-fluid\">\n            <div class=\"navbar-header\">\n              <a class=\"navbar-brand\" href=\"#\">Shopping List</a>\n            </div>\n            <ul class=\"nav navbar-nav\">\n              <li :class=\"{ active: activeTab === 'List' }\" v-on:click=\"changeTab('List')\">\n                  <router-link to=\"/\"><span class=\"glyphicon glyphicon-list\"></span> List</router-link>\n              </li>\n              <li :class=\"{ active: activeTab === 'AddItem' }\" v-on:click=\"changeTab('AddItem')\">\n                <router-link to=\"/addForm\"><span class=\"glyphicon glyphicon-plus\"></span>Add Item</router-link>\n              </li>\n            </ul>\n            <form class=\"navbar-form navbar-right\">\n              <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Search\" name=\"search\" v-on:keyup=\"filter\" v-model=\"searchText\">\n              </div>\n            </form>\n          </div>\n        </nav>\n\n\n        <div class=\"card overflow-hidden\">\n\n          <div id=\"scrolling-techniques-3\" class=\"overflow-y-auto\" max-height=\"600\">\n            <!-- Extra space for the app bar -->\n            <div style=\"height: 40px;\">\n            </div>\n            <!-- Actual application -->\n            <router-view></router-view>\n          </div>\n        </div>\n\n        <!-- Loading bar that loads based on the property of loading in the store.\n        It loads when the store is processing a server request -->\n        <loading-bar :dialog=\"this.$store.state.loading\"></loading-bar>\n        <!-- Error box that displays an error when it occurs in the server -->\n        <error-box></error-box>\n\t\t\t</div>\n\t\t</main>\n\t</v-app>\n</template>\n\n\n<script>\nimport { mapActions } from 'vuex';\nimport Loading from \"@/components/loading\";\nimport ErrorBox from \"@/components/errorbox\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      searchText: \"\",\n      activeTab: \"\",\n    };\n  },\n  components:{\n    loadingBar: Loading,\n    errorBox: ErrorBox\n  },\n  computed: {\n  },\n  methods: {\n    ...mapActions([\"filterItems\"]),\n    filter(){\n      this.$store.dispatch(\"filterItems\", this.searchText)\n    },\n    changeTab(text){\n      this.activeTab= text;\n    }\n  }\n};\n</script>\n<style lang=\"scss\">\n@import url(\"https://fonts.googleapis.com/css?family=Roboto\");\n\n/*brown and mint*/\n/*dark brown 32292F\nlight mint 99E1D9\nbisque F0F7F4\ndark mint 70ABAF\nlight brown 705D56*/\n.router-link-exact-active {\n}\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nmain {\n  padding: 40px;\n  font-family: \"Roboto\", \"sans-serif\";\n  background: #fff;\n  background-repeat: no-repeat;\n  background-size: auto;\n  background: fixed;\n  color: #444;\n  background-image: url(\"https://i.pinimg.com/originals/d7/59/b5/d759b559ad669f9e199f1aaaa381a8ab.jpg\");\n}\n\nh1,\np {\n  margin: 0 0 1em 0;\n}\n\nimg {\n  max-width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n\n.app-container {\n  border-radius: 25px;\n  max-width: 1020px;\n  margin: 0 auto;\n  background-color: #fff;\n}\n\n.app-container > * {\n  border-radius: 5px;\n  font-size: 150%;\n  margin-bottom: 10px;\n}\n\n.wrapper {\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-auto-rows: minmax(150px, auto);\n}\n\n.wrapper > * {\n  padding: 15px;\n  border-radius: 5px;\n}\n\n.panel {\n  /* needed for the flex layout*/\n  margin-left: 5px;\n  margin-right: 5px;\n  flex: 1 1 200px;\n}\n\n.tall-panel {\n  grid-row-end: span 2;\n}\n\n/* We need to set the margin used on flex items to 0 as we have gaps in grid.  */\n@supports (display: grid) {\n  .wrapper > * {\n    margin: 0;\n  }\n}\n</style>\n\n"]}]}